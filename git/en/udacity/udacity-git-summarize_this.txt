git log -p -w will show the patch information, but will not highlight lines where only whitespace changes have occurred.

git log -p Recap
To recap, the -p flag (which is the same as the --patch flag) is used to alter how git log displays information:

$ git log -p
This command adds the following to the default output:

displays the files that have been modified
displays the location of the lines that have been added/removed
displays the actual changes that have been made

git log
git log --oneline
git log --stat
git log -p
git log -p <SHA>, e.g.
git log -p fdf5493


git show
The other command that shows a specific commit is git show:

$ git show
Running it like the example above will only display the most recent commit. Typically, a SHA is provided as a final argument:

$ git show fdf5493

the commit
the author
the date
the commit message
the patch information
However, git show can be combined with most of the other flags we've looked at:

--stat - to show the how many files were changed and the number of lines that were added/removed
-p or --patch - this the default, but if --stat is used, the patch won't display, so pass -p to add it again
-w - to ignore changes to whitespace
You are now among the git logging elite! Try your hand at a few quizzes.

# Git Tag Command
Pay attention to what's shown (just the SHA and the commit message)

The command we'll be using to interact with the repository's tags is the git tag command:

$ git tag -a v1.0

CAREFUL: In the command above (git tag -a v1.0) the -a flag is used. This flag tells Git to create an annotated flag. If you don't provide the flag (i.e. git tag v1.0) then it'll create what's called a lightweight tag.

Annotated tags are recommended because they include a lot of extra information such as:

the person who made the tag
the date the tag was made
a message for the tag
Because of this, you should always use annotated tags.

# Deleting A Tag
What if you accidentally misspelled something in the tag's message, or mistyped the actual tag name (v0.1 instead of v1.0). How could you fix this? The easiest way is just to delete the tag and make a new one.

A Git tag can be deleted with the -d flag (for delete!) and the name of the tag:

$ git tag -d v1.0

# Adding A Tag To A Past Commit
Running git tag -a v1.0 will tag the most recent commit. But what if you wanted to tag a commit that occurred farther back in the repo's history?

All you have to do is provide the SHA of the commit you want to tag!

$ git tag -a v1.0 a87984

#Git Tag Recap
To recap, the git tag command is used to add a marker on a specific commit. The tag does not move around as new commits are added.

$ git tag -a beta
This command will:

add a tag to the most recent commit
add a tag to a specific commit if a SHA is passed
Further Research
Git Basics - Tagging from the Git Book, https://git-scm.com/book/en/v2/Git-Basics-Tagging
Git Tag from the Git Docs, https://git-scm.com/docs/git-tag


